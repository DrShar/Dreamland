const insertInitialApplication = (applicationForProperty) => { 
    /*
        applicationForProperty is equal to {propertyId: [userId]}
        add this new document to applications collection
        return true if the insertion was successful
        return false if not
    */

        applicationForProperty = {propertyId: [userId]}
        exports.insertInitialApplication = (applicationForProperty)=>{
            // validate request
            if(!applicationForProperty){
                return false;
            }
        
            // new application
            const appProp_ = new Userdb( { applicationForProperty } )
        
            // save application in the database
            // appProprec_ = Application Property record 
            appProp_.save().then(appProprec_ => {
                if (appProprec_  != null){
                    appProprec_ .userId = appProprec_._id;    //JORDAN - Not sure if this is done properly 
                    return true;
                } else {
                    return false;
                }
            }).catch(err =>{
                if (err){
                    return false;
                }
            });
        
        }




    return true;
}

const getApplications = (propertyId) => {
    /*
        return document ({propertyID: [array of userId that have applied]})
        return false if the document doesnt exist
    */

        Userdb.findById(propertyId._id) // Would this still use user as the ID will be the same? Or did we change that because of autogenerated ID??
        .then(returnedUser =>{
            if(!returnedUser){
                return null;
            }else {
                return returnedUser;
            }
        })
        .catch(err =>{
            if (err){
                return null;
            }
        })
    return null;
}

const deleteApplication = (applicantToRemove) => {
      /*
        applicantToRemove is equal to {propertyId: userId}
        update the document with the key: propertyID so that the array no longer has the userID

        return true for success, else return false
    */
        const id = req.params.id;

        applicantToRemove.findByIdAndDelete(id)
            .then(data => {
                if(!data){
                    res.status(404).send({ message : `Cannot Delete with id ${id}. Maybe id is wrong`})
                }else{
                    res.send({
                        message : "property was deleted successfully!"
                    })
                }
            })
            .catch(err =>{
                res.status(500).send({
                    message: "Could not delete property with id=" + id
                });
            });
    return true;
}

const updateApplications = (applicationsForProperty) => {
        /*
        applicationsForProperty is equal to  an updated {propertyId: [array of userId that have applied] }
        update the document with corresponding propertyId 
        return true for success, else return false
        */

        if(!req.body){
            return res
                .status(400)
                .send({ message : "Data to update can not be empty"})
        }
    
        const id = req.params.id;
        applicationsForProperty.findByIdAndUpdate(id, req.body, { useFindAndModify: false})
            .then(data => {
                if(!data){
                    res.status(404).send({ message : `Cannot Update property with ${id}. Maybe property not found!`})
                }else{
                    res.send(data)
                }
            })
            .catch(err =>{
                res.status(500).send({ message : "Error Update property information"})
            });
    };




module.exports = {insertInitialApplication, deleteApplication, getApplications, updateApplications}
