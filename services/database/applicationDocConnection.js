

const insertInitialApplication = (applicationForProperty) => { 
    if(!applicationForProperty){
        return false;
    }

    let applicationToInsert = applicationForProperty;
    const propertyApplicationList = new applicationSchema( { applicationToInsert } );

    propertyApplicationList.save().then(savedApplicationList => {
        if (savedApplicationList != null){
            return true;
        } else {
            return false;
        }
    }).catch(err =>{
        if (err){
            return false;
        }
    });

    return false;
}

const getApplications = (propertyId) => {
    /*
        return document ({propertyID: [array of userId that have applied]})
        return false if the document doesnt exist
    */

    // var id = mongoose.Types.ObjectId(propertyId); - Method to convert string to ObjectID
    database.findById(propertyId) // Would this still use user as the ID will be the same? Or did we change that because of autogenerated ID??
        .then(returnedUserIds =>{
            if(returnedUserIds.length == 0){
                return null;
            }else {
                return returnedUser;
            }
        })
        .catch(err =>{
            if (err){
                return null;
            }
        })
    return null;
}

const deleteApplication = (applicantToRemove) => {

    let applicantToRemovePropertyId = applicantToRemove.propertyId;
    let userId = applicantToRemove.userId;
    let applicantUserIdList;
    let query = {propertyId: applicantToRemovePropertyId};



    database.findOne(query, function (err, applicationDoc) {
        if (err){
            return null;
        } else if (applicantDoc.applicantIds.length == 0){
            return null;
        } else {
            applicantUserIdList = applicationDoc.applicantIds;
        }


    });


    let i = 0;
    for (i; i < applicantUserIdList.length; i++){
        if (applicantUserIdList[i] == userId){
            applicantUserIdList.splice(i, 1);
        }
    }


    database.findOneAndUpdate(query, { $set: { propertyId: applicantUserIdList }}); 

   
    return true;
}

//const updateApplications = (applicationsForProperty) => {
        /*
        applicationsForProperty is equal to  an updated {propertyId: [array of userId that have applied] }
        update the document with corresponding propertyId 
        return true for success, else return false
        */

//}



module.exports = {insertInitialApplication, deleteApplication, getApplications}